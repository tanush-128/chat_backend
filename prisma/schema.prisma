generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid()) @map("_id")
  name          String?
  email         String           @unique
  emailVerified DateTime?
  image         String?
  chatRoomsIds  String[]
  accounts      Account[]
  chatRooms     ChatRoomOnUser[]
  messages      Message[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String  @id @default(cuid()) @map("_id")
  slug      String  @unique
  title     String
  desc      String
  img       String?
  view      Int     @default(0)
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email])
}

model ChatRoom {
  id        String           @id @default(cuid()) @map("_id")
  name      String?
  createdAt DateTime         @default(now())
  userIds   String[]
  users     ChatRoomOnUser[]
  messages  Message[]
}

model ChatRoomOnUser {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Message {
  id         String   @id @default(cuid()) @map("_id")
  createdAt  DateTime @default(now())
  content    String
  chatRoomId String
  userEmail  String
  userName   String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userEmail], references: [email])
}
